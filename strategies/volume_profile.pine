// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © dawsonbremner4400

//@version=6
strategy("Volume Profile S/R - Topstep Combine", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=2, max_bars_back=500)

// === INPUTS ===
// Trading Session
use_session = input.bool(true, "Use Trading Session", group="Session")
session_time = input.session("0930-1600", "Trading Session", group="Session")
in_session = not use_session or not na(time(timeframe.period, session_time))

// Backtest Date Range
use_date_filter = input.bool(true, "Use Date Filter", group="Backtest Range")
start_date = input.time(timestamp("17 Jan 2025 09:30 +0000"), "Start Date", group="Backtest Range")
end_date = input.time(timestamp("24 Jan 2025 16:00 +0000"), "End Date", group="Backtest Range")
in_date_range = not use_date_filter or (time >= start_date and time <= end_date)

// Volume Profile Settings - MANUAL INPUTS
use_manual_levels = input.bool(true, "Use Manual VP Levels", group="Volume Profile Manual")
manual_week_vah = input.float(21100, "Previous Week VAH", step=0.25, group="Volume Profile Manual")
manual_week_val = input.float(20800, "Previous Week VAL", step=0.25, group="Volume Profile Manual")
manual_week_poc = input.float(20950, "Previous Week POC", step=0.25, group="Volume Profile Manual")
manual_day_vah = input.float(21050, "Previous Day VAH", step=0.25, group="Volume Profile Manual")
manual_day_val = input.float(20900, "Previous Day VAL", step=0.25, group="Volume Profile Manual")
manual_day_poc = input.float(20975, "Previous Day POC", step=0.25, group="Volume Profile Manual")

proximity_threshold = input.float(0.3, "Proximity to Level (%)", step=0.01, group="Volume Profile Manual")
update_levels_weekly = input.bool(false, "Auto-update Weekly Levels", group="Volume Profile Manual")
update_levels_daily = input.bool(false, "Auto-update Daily Levels", group="Volume Profile Manual")

// Confirmation Filters
use_rsi = input.bool(true, "Use RSI Filter", group="Filters")
rsi_length = input.int(14, "RSI Length", group="Filters")
rsi_ob = input.int(70, "RSI Overbought", group="Filters")
rsi_os = input.int(30, "RSI Oversold", group="Filters")

use_volume = input.bool(true, "Use Volume Filter", group="Filters")
vol_mult = input.float(1.2, "Volume Multiplier", step=0.1, group="Filters")

// Risk Management
risk_reward = input.float(2.0, "Risk:Reward Ratio", step=0.1, group="Risk")
atr_length = input.int(14, "ATR Length", group="Risk")
atr_mult_sl = input.float(0.8, "ATR Multiplier for SL", step=0.1, group="Risk")
max_trades_per_day = input.int(12, "Max Trades Per Day", group="Risk")

// Position Sizing
account_size = input.float(50000, "Account Size ($)", step=1000, group="Position Sizing")
risk_per_trade = input.float(0.4, "Risk Per Trade (%)", step=0.1, group="Position Sizing")
min_contracts = input.int(1, "Minimum Contracts", minval=1, group="Position Sizing")
max_contracts = input.int(8, "Maximum Contracts", minval=1, group="Position Sizing")
mnq_point_value = input.float(2.0, "MNQ Point Value ($)", group="Position Sizing")

// === VOLUME PROFILE LEVELS ===
// Use manual inputs or auto-calculated levels
var float week_vah = na
var float week_val = na
var float week_poc = na
var float day_vah = na
var float day_val = na
var float day_poc = na

if use_manual_levels
    // Use the manual inputs you provide
    week_vah := manual_week_vah
    week_val := manual_week_val
    week_poc := manual_week_poc
    day_vah := manual_day_vah
    day_val := manual_day_val
    day_poc := manual_day_poc
else
    // Fallback to basic price levels if manual disabled
    is_new_week = ta.change(dayofweek) == 1
    is_new_day = ta.change(dayofmonth) != 0 or hour == 0 and minute == 0
    
    if is_new_week and update_levels_weekly
        week_high = ta.highest(high, 7)
        week_low = ta.lowest(low, 7)
        week_vah := week_high[1]
        week_val := week_low[1]
        week_poc := (week_vah + week_val) / 2
    
    if is_new_day and update_levels_daily
        day_high = ta.highest(high, 1)
        day_low = ta.lowest(low, 1)
        day_vah := day_high[1]
        day_val := day_low[1]
        day_poc := (day_vah + day_val) / 2
    
    // Initialize if na
    week_vah := na(week_vah) ? manual_week_vah : week_vah
    week_val := na(week_val) ? manual_week_val : week_val
    week_poc := na(week_poc) ? manual_week_poc : week_poc
    day_vah := na(day_vah) ? manual_day_vah : day_vah
    day_val := na(day_val) ? manual_day_val : day_val
    day_poc := na(day_poc) ? manual_day_poc : day_poc

// === PROXIMITY CHECKS ===
proximity_pct = proximity_threshold / 100

// Check if price is near manually input levels
near_week_vah = math.abs(close - week_vah) <= (week_vah * proximity_pct)
near_week_val = math.abs(close - week_val) <= (week_val * proximity_pct)
near_week_poc = math.abs(close - week_poc) <= (week_poc * proximity_pct)
near_day_vah = math.abs(close - day_vah) <= (day_vah * proximity_pct)
near_day_val = math.abs(close - day_val) <= (day_val * proximity_pct)
near_day_poc = math.abs(close - day_poc) <= (day_poc * proximity_pct)

// Support and resistance zones
at_support = near_week_val or near_day_val or 
             (near_week_poc and close < week_poc) or 
             (near_day_poc and close < day_poc)

at_resistance = near_week_vah or near_day_vah or (near_week_poc and close > week_poc) or (near_day_poc and close > day_poc)

// === CONFIRMATION INDICATORS ===
// RSI
rsi = ta.rsi(close, rsi_length)
rsi_bullish = not use_rsi or (rsi > 35 and rsi < rsi_ob)
rsi_bearish = not use_rsi or (rsi < 65 and rsi > rsi_os)

// Volume
vol_avg = ta.sma(volume, 20)
vol_confirm = not use_volume or volume > vol_avg * vol_mult

// ATR for stops
atr = ta.atr(atr_length)

// Price action confirmation
bullish_candle = close > open and (close - open) > (high - low) * 0.5
bearish_candle = close < open and (open - close) > (high - low) * 0.5

// === ENTRY CONDITIONS ===
// Trade bounces and rejections at manual VP levels
long_signal = in_session and in_date_range and
             at_support and close > open and rsi_bullish and vol_confirm

short_signal = in_session and in_date_range and
              at_resistance and close < open and rsi_bearish and vol_confirm

// === TRADE MANAGEMENT ===
var int daily_trades = 0
new_day = ta.change(dayofmonth) != 0 or (hour == 0 and minute == 0)
if new_day
    daily_trades := 0

// Dynamic Position Sizing
max_risk_dollars = account_size * (risk_per_trade / 100)
stop_loss_points = atr * atr_mult_sl
stop_loss_dollars = stop_loss_points * mnq_point_value
contracts_needed = math.floor(max_risk_dollars / stop_loss_dollars)
position_contracts = math.max(min_contracts, math.min(max_contracts, contracts_needed))

// === STRATEGY EXECUTION ===
if long_signal and daily_trades < max_trades_per_day and strategy.position_size == 0
    stop_price = close - (atr * atr_mult_sl)
    take_profit = close + (atr * atr_mult_sl * risk_reward)
    
    strategy.entry("Long", strategy.long, qty=position_contracts)
    strategy.exit("Long Exit", "Long", stop=stop_price, limit=take_profit)
    daily_trades := daily_trades + 1
    
    alert('{"time":"' + str.tostring(time) + '","action":"buy","symbol":"' + syminfo.ticker + '","price":' + str.tostring(close) + ',"sl":' + str.tostring(stop_price) + ',"tp":' + str.tostring(take_profit) + ',"qty":' + str.tostring(position_contracts) + '}', alert.freq_once_per_bar)

if short_signal and daily_trades < max_trades_per_day and strategy.position_size == 0
    stop_price = close + (atr * atr_mult_sl)
    take_profit = close - (atr * atr_mult_sl * risk_reward)
    
    strategy.entry("Short", strategy.short, qty=position_contracts)
    strategy.exit("Short Exit", "Short", stop=stop_price, limit=take_profit)
    daily_trades := daily_trades + 1
    
    alert('{"time":"' + str.tostring(time) + '","action":"sell","symbol":"' + syminfo.ticker + '","price":' + str.tostring(close) + ',"sl":' + str.tostring(stop_price) + ',"tp":' + str.tostring(take_profit) + ',"qty":' + str.tostring(position_contracts) + '}', alert.freq_once_per_bar)

// === PLOTTING ===
// Manual Volume Profile Levels
plot(week_vah, "Week VAH", color=color.red, linewidth=3, style=plot.style_line)
plot(week_val, "Week VAL", color=color.green, linewidth=3, style=plot.style_line)
plot(week_poc, "Week POC", color=color.blue, linewidth=3, style=plot.style_line)
plot(day_vah, "Day VAH", color=color.orange, linewidth=2, style=plot.style_line)
plot(day_val, "Day VAL", color=color.lime, linewidth=2, style=plot.style_line)
plot(day_poc, "Day POC", color=color.aqua, linewidth=2, style=plot.style_line)

// Highlight proximity zones
bgcolor(at_support ? color.new(color.green, 90) : na, title="Support Zone")
bgcolor(at_resistance ? color.new(color.red, 90) : na, title="Resistance Zone")

// Trade signals
plotshape(long_signal, "Long Signal", shape.triangleup, location.belowbar, color.green, size=size.small)
plotshape(short_signal, "Short Signal", shape.triangledown, location.abovebar, color.red, size=size.small)

// Info table
var table info_table = table.new(position.top_right, 2, 8, bgcolor=color.white, border_width=1)
if barstate.islast
    table.cell(info_table, 0, 0, "Daily Trades", text_color=color.black)
    table.cell(info_table, 1, 0, str.tostring(daily_trades), text_color=color.black)
    table.cell(info_table, 0, 1, "Position Size", text_color=color.black)
    table.cell(info_table, 1, 1, str.tostring(position_contracts), text_color=color.black)
    table.cell(info_table, 0, 2, "Week VAH", text_color=color.black)
    table.cell(info_table, 1, 2, str.tostring(week_vah), text_color=color.red)
    table.cell(info_table, 0, 3, "Week POC", text_color=color.black)
    table.cell(info_table, 1, 3, str.tostring(week_poc), text_color=color.blue)
    table.cell(info_table, 0, 4, "Week VAL", text_color=color.black)
    table.cell(info_table, 1, 4, str.tostring(week_val), text_color=color.green)
    table.cell(info_table, 0, 5, "Day VAH", text_color=color.black)
    table.cell(info_table, 1, 5, str.tostring(day_vah), text_color=color.orange)
    table.cell(info_table, 0, 6, "Day POC", text_color=color.black)
    table.cell(info_table, 1, 6, str.tostring(day_poc), text_color=color.aqua)
    table.cell(info_table, 0, 7, "Day VAL", text_color=color.black)
    table.cell(info_table, 1, 7, str.tostring(day_val), text_color=color.lime)